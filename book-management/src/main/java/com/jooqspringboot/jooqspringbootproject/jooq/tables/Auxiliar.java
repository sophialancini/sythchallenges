/*
 * This file is generated by jOOQ.
 */
package com.jooqspringboot.jooqspringbootproject.jooq.tables;


import com.jooqspringboot.jooqspringbootproject.jooq.DefaultSchema;
import com.jooqspringboot.jooqspringbootproject.jooq.Indexes;
import com.jooqspringboot.jooqspringbootproject.jooq.Keys;
import com.jooqspringboot.jooqspringbootproject.jooq.tables.records.AuxiliarRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Auxiliar extends TableImpl<AuxiliarRecord> {

    private static final long serialVersionUID = -749870780;

    /**
     * The reference instance of <code>auxiliar</code>
     */
    public static final Auxiliar AUXILIAR = new Auxiliar();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AuxiliarRecord> getRecordType() {
        return AuxiliarRecord.class;
    }

    /**
     * The column <code>auxiliar.author_id</code>.
     */
    public final TableField<AuxiliarRecord, Integer> AUTHOR_ID = createField(DSL.name("author_id"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>auxiliar.book_id</code>.
     */
    public final TableField<AuxiliarRecord, Integer> BOOK_ID = createField(DSL.name("book_id"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>auxiliar.auxid</code>.
     */
    public final TableField<AuxiliarRecord, Integer> AUXID = createField(DSL.name("auxid"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * Create a <code>auxiliar</code> table reference
     */
    public Auxiliar() {
        this(DSL.name("auxiliar"), null);
    }

    /**
     * Create an aliased <code>auxiliar</code> table reference
     */
    public Auxiliar(String alias) {
        this(DSL.name(alias), AUXILIAR);
    }

    /**
     * Create an aliased <code>auxiliar</code> table reference
     */
    public Auxiliar(Name alias) {
        this(alias, AUXILIAR);
    }

    private Auxiliar(Name alias, Table<AuxiliarRecord> aliased) {
        this(alias, aliased, null);
    }

    private Auxiliar(Name alias, Table<AuxiliarRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Auxiliar(Table<O> child, ForeignKey<O, AuxiliarRecord> key) {
        super(child, key, AUXILIAR);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.AUXILIAR_PRIMARY);
    }

    @Override
    public Identity<AuxiliarRecord, Integer> getIdentity() {
        return Keys.IDENTITY_AUXILIAR;
    }

    @Override
    public UniqueKey<AuxiliarRecord> getPrimaryKey() {
        return Keys.KEY_AUXILIAR_PRIMARY;
    }

    @Override
    public List<UniqueKey<AuxiliarRecord>> getKeys() {
        return Arrays.<UniqueKey<AuxiliarRecord>>asList(Keys.KEY_AUXILIAR_PRIMARY);
    }

    @Override
    public Auxiliar as(String alias) {
        return new Auxiliar(DSL.name(alias), this);
    }

    @Override
    public Auxiliar as(Name alias) {
        return new Auxiliar(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Auxiliar rename(String name) {
        return new Auxiliar(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Auxiliar rename(Name name) {
        return new Auxiliar(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, Integer, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
