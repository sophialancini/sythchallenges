/*
 * This file is generated by jOOQ.
 */
package com.jooqspringboot.jooqspringbootproject.jooq.tables.records;


import com.jooqspringboot.jooqspringbootproject.jooq.tables.Auxiliar;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AuxiliarRecord extends UpdatableRecordImpl<AuxiliarRecord> implements Record3<Integer, Integer, Integer> {

    private static final long serialVersionUID = 960810485;

    /**
     * Setter for <code>auxiliar.author_id</code>.
     */
    public void setAuthorId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>auxiliar.author_id</code>.
     */
    public Integer getAuthorId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>auxiliar.book_id</code>.
     */
    public void setBookId(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>auxiliar.book_id</code>.
     */
    public Integer getBookId() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>auxiliar.auxid</code>.
     */
    public void setAuxid(Integer value) {
        set(2, value);
    }

    /**
     * Getter for <code>auxiliar.auxid</code>.
     */
    public Integer getAuxid() {
        return (Integer) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, Integer, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Integer, Integer, Integer> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Auxiliar.AUXILIAR.AUTHOR_ID;
    }

    @Override
    public Field<Integer> field2() {
        return Auxiliar.AUXILIAR.BOOK_ID;
    }

    @Override
    public Field<Integer> field3() {
        return Auxiliar.AUXILIAR.AUXID;
    }

    @Override
    public Integer component1() {
        return getAuthorId();
    }

    @Override
    public Integer component2() {
        return getBookId();
    }

    @Override
    public Integer component3() {
        return getAuxid();
    }

    @Override
    public Integer value1() {
        return getAuthorId();
    }

    @Override
    public Integer value2() {
        return getBookId();
    }

    @Override
    public Integer value3() {
        return getAuxid();
    }

    @Override
    public AuxiliarRecord value1(Integer value) {
        setAuthorId(value);
        return this;
    }

    @Override
    public AuxiliarRecord value2(Integer value) {
        setBookId(value);
        return this;
    }

    @Override
    public AuxiliarRecord value3(Integer value) {
        setAuxid(value);
        return this;
    }

    @Override
    public AuxiliarRecord values(Integer value1, Integer value2, Integer value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached AuxiliarRecord
     */
    public AuxiliarRecord() {
        super(Auxiliar.AUXILIAR);
    }

    /**
     * Create a detached, initialised AuxiliarRecord
     */
    public AuxiliarRecord(Integer authorId, Integer bookId, Integer auxid) {
        super(Auxiliar.AUXILIAR);

        set(0, authorId);
        set(1, bookId);
        set(2, auxid);
    }
}
