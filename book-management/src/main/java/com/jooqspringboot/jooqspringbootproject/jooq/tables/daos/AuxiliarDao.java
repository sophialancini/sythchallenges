/*
 * This file is generated by jOOQ.
 */
package com.jooqspringboot.jooqspringbootproject.jooq.tables.daos;


import com.jooqspringboot.jooqspringbootproject.jooq.tables.Auxiliar;
import com.jooqspringboot.jooqspringbootproject.jooq.tables.records.AuxiliarRecord;

import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AuxiliarDao extends DAOImpl<AuxiliarRecord, com.jooqspringboot.jooqspringbootproject.jooq.tables.pojos.Auxiliar, Integer> {

    /**
     * Create a new AuxiliarDao without any configuration
     */
    public AuxiliarDao() {
        super(Auxiliar.AUXILIAR, com.jooqspringboot.jooqspringbootproject.jooq.tables.pojos.Auxiliar.class);
    }

    /**
     * Create a new AuxiliarDao with an attached configuration
     */
    public AuxiliarDao(Configuration configuration) {
        super(Auxiliar.AUXILIAR, com.jooqspringboot.jooqspringbootproject.jooq.tables.pojos.Auxiliar.class, configuration);
    }

    @Override
    public Integer getId(com.jooqspringboot.jooqspringbootproject.jooq.tables.pojos.Auxiliar object) {
        return object.getAuxid();
    }

    /**
     * Fetch records that have <code>author_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.jooqspringboot.jooqspringbootproject.jooq.tables.pojos.Auxiliar> fetchRangeOfAuthorId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Auxiliar.AUXILIAR.AUTHOR_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>author_id IN (values)</code>
     */
    public List<com.jooqspringboot.jooqspringbootproject.jooq.tables.pojos.Auxiliar> fetchByAuthorId(Integer... values) {
        return fetch(Auxiliar.AUXILIAR.AUTHOR_ID, values);
    }

    /**
     * Fetch records that have <code>book_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.jooqspringboot.jooqspringbootproject.jooq.tables.pojos.Auxiliar> fetchRangeOfBookId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Auxiliar.AUXILIAR.BOOK_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>book_id IN (values)</code>
     */
    public List<com.jooqspringboot.jooqspringbootproject.jooq.tables.pojos.Auxiliar> fetchByBookId(Integer... values) {
        return fetch(Auxiliar.AUXILIAR.BOOK_ID, values);
    }

    /**
     * Fetch records that have <code>auxid BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.jooqspringboot.jooqspringbootproject.jooq.tables.pojos.Auxiliar> fetchRangeOfAuxid(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Auxiliar.AUXILIAR.AUXID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>auxid IN (values)</code>
     */
    public List<com.jooqspringboot.jooqspringbootproject.jooq.tables.pojos.Auxiliar> fetchByAuxid(Integer... values) {
        return fetch(Auxiliar.AUXILIAR.AUXID, values);
    }

    /**
     * Fetch a unique record that has <code>auxid = value</code>
     */
    public com.jooqspringboot.jooqspringbootproject.jooq.tables.pojos.Auxiliar fetchOneByAuxid(Integer value) {
        return fetchOne(Auxiliar.AUXILIAR.AUXID, value);
    }
}
